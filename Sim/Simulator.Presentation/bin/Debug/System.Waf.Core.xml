<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Waf.Core</name>
    </assembly>
    <members>
        <member name="T:System.Waf.Applications.AsyncDelegateCommand">
            <summary>
            Provides an <see cref="T:System.Windows.Input.ICommand"/> implementation which relays the <see cref="M:System.Waf.Applications.AsyncDelegateCommand.Execute(System.Object)"/> and <see cref="M:System.Waf.Applications.AsyncDelegateCommand.CanExecute(System.Object)"/> 
            method to the specified delegates.
            This implementation disables the command during the async command execution.
            </summary>
        </member>
        <member name="M:System.Waf.Applications.AsyncDelegateCommand.#ctor(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.AsyncDelegateCommand"/> class.
            </summary>
            <param name="execute">Async Delegate to execute when Execute is called on the command.</param>
            <exception cref="T:System.ArgumentNullException">The execute argument must not be null.</exception>
        </member>
        <member name="M:System.Waf.Applications.AsyncDelegateCommand.#ctor(System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.AsyncDelegateCommand"/> class.
            </summary>
            <param name="execute">Async Delegate to execute when Execute is called on the command.</param>
            <exception cref="T:System.ArgumentNullException">The execute argument must not be null.</exception>
        </member>
        <member name="M:System.Waf.Applications.AsyncDelegateCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.AsyncDelegateCommand"/> class.
            </summary>
            <param name="execute">Async Delegate to execute when Execute is called on the command.</param>
            <param name="canExecute">Delegate to execute when CanExecute is called on the command.</param>
            <exception cref="T:System.ArgumentNullException">The execute argument must not be null.</exception>
        </member>
        <member name="M:System.Waf.Applications.AsyncDelegateCommand.#ctor(System.Func{System.Object,System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.AsyncDelegateCommand"/> class.
            </summary>
            <param name="execute">Async Delegate to execute when Execute is called on the command.</param>
            <param name="canExecute">Delegate to execute when CanExecute is called on the command.</param>
            <exception cref="T:System.ArgumentNullException">The execute argument must not be null.</exception>
        </member>
        <member name="P:System.Waf.Applications.AsyncDelegateCommand.DisabledCommand">
            <summary>
            Returns a disabled command.
            </summary>
        </member>
        <member name="E:System.Waf.Applications.AsyncDelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:System.Waf.Applications.AsyncDelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:System.Waf.Applications.AsyncDelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:System.Waf.Applications.AsyncDelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:System.Waf.Applications.AsyncDelegateCommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:System.Waf.Applications.AsyncDelegateCommand.OnCanExecuteChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Waf.Applications.AsyncDelegateCommand.CanExecuteChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:System.Waf.Applications.DelegateCommand">
            <summary>
            Provides an <see cref="T:System.Windows.Input.ICommand"/> implementation which relays the <see cref="M:System.Waf.Applications.DelegateCommand.Execute(System.Object)"/> and <see cref="M:System.Waf.Applications.DelegateCommand.CanExecute(System.Object)"/> 
            method to the specified delegates.
            </summary>
        </member>
        <member name="M:System.Waf.Applications.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.DelegateCommand"/> class.
            </summary>
            <param name="execute">Delegate to execute when Execute is called on the command.</param>
            <exception cref="T:System.ArgumentNullException">The execute argument must not be null.</exception>
        </member>
        <member name="M:System.Waf.Applications.DelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.DelegateCommand"/> class.
            </summary>
            <param name="execute">Delegate to execute when Execute is called on the command.</param>
            <exception cref="T:System.ArgumentNullException">The execute argument must not be null.</exception>
        </member>
        <member name="M:System.Waf.Applications.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.DelegateCommand"/> class.
            </summary>
            <param name="execute">Delegate to execute when Execute is called on the command.</param>
            <param name="canExecute">Delegate to execute when CanExecute is called on the command.</param>
            <exception cref="T:System.ArgumentNullException">The execute argument must not be null.</exception>
        </member>
        <member name="M:System.Waf.Applications.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.DelegateCommand"/> class.
            </summary>
            <param name="execute">Delegate to execute when Execute is called on the command.</param>
            <param name="canExecute">Delegate to execute when CanExecute is called on the command.</param>
            <exception cref="T:System.ArgumentNullException">The execute argument must not be null.</exception>
        </member>
        <member name="P:System.Waf.Applications.DelegateCommand.DisabledCommand">
            <summary>
            Returns a disabled command.
            </summary>
        </member>
        <member name="E:System.Waf.Applications.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:System.Waf.Applications.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:System.Waf.Applications.DelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:System.Waf.Applications.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:System.Waf.Applications.DelegateCommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:System.Waf.Applications.DelegateCommand.OnCanExecuteChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Waf.Applications.DelegateCommand.CanExecuteChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:System.Waf.Applications.IView">
            <summary>
            Represents a view
            </summary>
        </member>
        <member name="P:System.Waf.Applications.IView.DataContext">
            <summary>
            Gets or sets the data context of the view.
            </summary>
        </member>
        <member name="T:System.Waf.Applications.RecentFile">
            <summary>
            Represents a recent file.
            </summary>
        </member>
        <member name="M:System.Waf.Applications.RecentFile.#ctor">
            <summary>
            This constructor overload is reserved and should not be used. It is used internally by the XmlSerializer.
            </summary>
        </member>
        <member name="M:System.Waf.Applications.RecentFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.RecentFile"/> class.
            </summary>
            <param name="path">The file path.</param>
            <exception cref="T:System.ArgumentException">The argument path must not be null or empty.</exception>
        </member>
        <member name="P:System.Waf.Applications.RecentFile.IsPinned">
            <summary>
            Gets or sets a value indicating whether this recent file is pinned.
            </summary>
        </member>
        <member name="P:System.Waf.Applications.RecentFile.Path">
            <summary>
            Gets the file path.
            </summary>
        </member>
        <member name="T:System.Waf.Applications.RecentFileList">
            <summary>
            This class encapsulates the logic for a recent file list.
            </summary>
            <remarks>
            This class can be used in a Settings file to store and load the recent file list as user settings. In Visual Studio you might need
            to enter the full class name "System.Waf.Applications.RecentFileList" in the "Select a type" dialog.
            </remarks>
        </member>
        <member name="M:System.Waf.Applications.RecentFileList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.RecentFileList"/> class.
            </summary>
        </member>
        <member name="P:System.Waf.Applications.RecentFileList.RecentFiles">
            <summary>
            Gets the list of recent files.
            </summary>
        </member>
        <member name="P:System.Waf.Applications.RecentFileList.MaxFilesNumber">
            <summary>
            Gets or sets the maximum number of recent files in the list.
            </summary>
            <remarks>
            If the set number is lower than the list count then the recent file list is truncated to the number.
            </remarks>
            <exception cref="T:System.ArgumentException">The value must be equal or larger than 1.</exception>
        </member>
        <member name="M:System.Waf.Applications.RecentFileList.Load(System.Collections.Generic.IEnumerable{System.Waf.Applications.RecentFile})">
            <summary>
            Loads the specified collection into the recent file list. Use this method when you need to initialize the RecentFileList 
            manually. This can be useful when you are using an own persistence implementation.
            </summary>
            <remarks>Recent file items that exist before the Load method is called are removed.</remarks>
            <param name="recentFiles">The recent files.</param>
            <exception cref="T:System.ArgumentNullException">The argument recentFiles must not be null.</exception>
        </member>
        <member name="M:System.Waf.Applications.RecentFileList.AddFile(System.String)">
            <summary>
            Adds a file to the recent file list. If the file already exists in the list then it only changes the position in the list.
            </summary>
            <param name="fileName">The path of the recent file.</param>
            <exception cref="T:System.ArgumentException">The argument fileName must not be null or empty.</exception>
        </member>
        <member name="M:System.Waf.Applications.RecentFileList.Remove(System.Waf.Applications.RecentFile)">
            <summary>
            Removes the specified recent file.
            </summary>
            <param name="recentFile">The recent file to remove.</param>
            <exception cref="T:System.ArgumentNullException">The argument recentFile must not be null.</exception>
            <exception cref="T:System.ArgumentException">The argument recentFile was not found in the recent files list.</exception>
        </member>
        <member name="T:System.Waf.Applications.ViewModelCore`1">
            <summary>
            Abstract base class for a ViewModel implementation with a simple approach to set the DataContext.
            </summary>
            <typeparam name="TView">The type of the view. Do provide an interface as type and not the concrete type itself.</typeparam>
        </member>
        <member name="M:System.Waf.Applications.ViewModelCore`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.ViewModelCore`1"/> class and attaches itself as DataContext to the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:System.Waf.Applications.ViewModelCore`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Applications.ViewModelCore`1"/> class and attaches itself as DataContext to the view.
            </summary>
            <param name="view">The view.</param>
            <param name="initializeDataContext">If set to true then the DataContext of the view is set within this constructor call. Default is true.</param>
        </member>
        <member name="P:System.Waf.Applications.ViewModelCore`1.View">
            <summary>
            Gets the associated view.
            </summary>
        </member>
        <member name="P:System.Waf.Applications.ViewModelCore`1.ViewCore">
            <summary>
            Gets the associated view as specified view type.
            </summary>
            <remarks>
            Use this property in a ViewModel class to avoid casting.
            </remarks>
        </member>
        <member name="T:System.Waf.Foundation.StringHelper">
            <summary>
            Provides helper methods for working with strings.
            </summary>
        </member>
        <member name="M:System.Waf.Foundation.StringHelper.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the string to the specified maximum length.
            </summary>
            <param name="value">The string.</param>
            <param name="maxLength">The maximum length.</param>
            <returns>The truncated string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxLength is less than 0.</exception>
        </member>
        <member name="T:System.Waf.Foundation.SynchronizingCollectionCore`2">
            <summary>
            Represents a collection that synchronizes all of it's items with the items of the specified original collection.
            When the original collection notifies a change via the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface then
            this collection synchronizes it's own items with the original items.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <typeparam name="TOriginal">The type of elements in the original collection.</typeparam>
        </member>
        <member name="M:System.Waf.Foundation.SynchronizingCollectionCore`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Foundation.SynchronizingCollectionCore`2"/> class.
            </summary>
            <param name="originalCollection">The original collection.</param>
            <param name="factory">The factory which is used to create new elements in this collection.</param>
            <exception cref="T:System.ArgumentNullException">The argument originalCollection must not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The argument factory must not be null.</exception>
        </member>
        <member name="M:System.Waf.Foundation.SynchronizingCollectionCore`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Foundation.SynchronizingCollectionCore`2"/> class.
            </summary>
            <param name="originalCollection">The original collection.</param>
            <param name="factory">The factory which is used to create new elements in this collection.</param>
            <param name="noCollectionChangedHandler">Pass true when the subclass takes care about the collection changed event of the originalCollection. Default is false.</param>
            <exception cref="T:System.ArgumentNullException">The argument originalCollection must not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The argument factory must not be null.</exception>
        </member>
        <member name="M:System.Waf.Foundation.SynchronizingCollectionCore`2.OriginalCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Call this method when the orignal collection has changed.
            </summary>
            <param name="sender">The sender of the collection changed event.</param>
            <param name="e">The event args of the collection changed event.</param>
            <exception cref="T:System.ArgumentNullException">Argument e must not be null.</exception>
        </member>
        <member name="M:System.Waf.Foundation.SynchronizingCollectionCore`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:System.Waf.Foundation.SynchronizingCollectionCore`2.Dispose(System.Boolean)">
            <summary>
            Call this method from a subclass when you implement a finalizer (destructor).
            </summary>
            <param name="disposing">if true then dispose unmanaged and managed resources; otherwise dispose only unmanaged resources.</param>
        </member>
        <member name="M:System.Waf.Foundation.SynchronizingCollectionCore`2.OnDispose(System.Boolean)">
            <summary>
            Override this method to free, release or reset any resources.
            </summary>
            <param name="disposing">if true then dispose unmanaged and managed resources; otherwise dispose only unmanaged resources.</param>
        </member>
        <member name="T:System.Waf.Foundation.Cache`1">
            <summary>
            Provides support for caching a value.
            </summary>
            <typeparam name="T">The type of object that is being cached.</typeparam>
        </member>
        <member name="M:System.Waf.Foundation.Cache`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Foundation.Cache`1"/> class.
            </summary>
            <param name="valueFactory">The delegate that is invoked to produce the value when it is needed.</param>
        </member>
        <member name="P:System.Waf.Foundation.Cache`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:System.Waf.Foundation.Cache`1.IsDirty">
            <summary>
            Indicates that the Cache is dirty and will update itself at the next Value read.
            </summary>
        </member>
        <member name="M:System.Waf.Foundation.Cache`1.SetDirty">
            <summary>
            Sets the Cache dirty. This ensures that the Cache is updated at the next Value read.
            </summary>
        </member>
        <member name="T:System.Waf.Foundation.CollectionHelper">
            <summary>
            Provides helper methods for collections.
            </summary>
        </member>
        <member name="M:System.Waf.Foundation.CollectionHelper.Empty``1">
            <summary>
            Returns an empty <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> that has the specified type argument.
            </summary>
            <typeparam name="TResult">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.</typeparam>
            <returns>An empty <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> whose type argument is TResult.</returns>
            <remarks>The Empty{TResult}() method caches an empty sequence of type TResult.</remarks>
        </member>
        <member name="M:System.Waf.Foundation.CollectionHelper.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <typeparam name="T">The collection item type.</typeparam>
            <param name="collection">The collection.</param>
            <param name="item">The object to locate in the collection. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Waf.Foundation.CollectionHelper.GetNextElementOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the next element in the collection or default when no next element can be found.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="current">The current item.</param>
            <returns>The next element in the collection or default when no next element can be found.</returns>
            <exception cref="T:System.ArgumentNullException">collection must not be <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The collection does not contain the specified current item.</exception>
        </member>
        <member name="T:System.Waf.Foundation.IReadOnlyObservableList`1">
            <summary>
            Represents a read-only list of elements that can be accessed by index. Additional the list
            notifies listeners of changes, such as when items get added and removed.
            </summary>
            <typeparam name="T">
            The type of elements in the read-only list. This type parameter is covariant.
            That is, you can use either the type you specified or any type that is more
            derived.
            </typeparam>
        </member>
        <member name="T:System.Waf.Foundation.Model">
            <summary>
            Defines the base class for a model.
            </summary>
        </member>
        <member name="E:System.Waf.Foundation.Model.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:System.Waf.Foundation.Model.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Set the property with the specified value. If the value is not equal with the field then the field is
            set, a PropertyChanged event is raised and it returns true.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="field">Reference to the backing field of the property.</param>
            <param name="value">The new value for the property.</param>
            <param name="propertyName">The property name. This optional parameter can be skipped
            because the compiler is able to create it automatically.</param>
            <returns>True if the value has changed, false if the old and new value were equal.</returns>
        </member>
        <member name="M:System.Waf.Foundation.Model.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:System.Waf.Foundation.Model.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The property name of the property that has changed.
            This optional parameter can be skipped because the compiler is able to create it automatically.</param>
        </member>
        <member name="M:System.Waf.Foundation.Model.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Waf.Foundation.Model.PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:System.Waf.Foundation.ReadOnlyObservableList`1">
            <summary>
            Represents a read-only <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            This class implements the IReadOnlyObservableList interface and provides public CollectionChanged and PropertyChanged events.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:System.Waf.Foundation.ReadOnlyObservableList`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"/>
            class that serves as a wrapper around the specified <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="list">
            The <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> with which to create this instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"/> class.
            </param>
            <exception cref="T:System.ArgumentNullException">list is null.</exception>
        </member>
        <member name="E:System.Waf.Foundation.ReadOnlyObservableList`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:System.Waf.Foundation.ReadOnlyObservableList`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:System.Waf.Foundation.ThrottledActionMode">
            <summary>
            Defines the throttling mode.
            </summary>
        </member>
        <member name="F:System.Waf.Foundation.ThrottledActionMode.InvokeMaxEveryDelayTime">
            <summary>
            Invokes the method at maximum once for the delay time.
            </summary>
        </member>
        <member name="F:System.Waf.Foundation.ThrottledActionMode.InvokeOnlyIfIdleForDelayTime">
            <summary>
            Invokes the method only if no invoke request was called for duration of the delay time.
            </summary>
        </member>
        <member name="T:System.Waf.Foundation.ThrottledAction">
            <summary>
            This class supports throttling of multiple method calls to improve the responsiveness of an application.
            It delays a method call and skips all additional calls of this method during the delay.
            The call of the action is synchronized. It uses the current synchronization context that was active during creating this class.
            </summary>
            <remarks>This class is thread-safe.</remarks>
        </member>
        <member name="M:System.Waf.Foundation.ThrottledAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Foundation.ThrottledAction"/> class.
            </summary>
            <param name="action">The action that should be throttled.</param>
            <exception cref="T:System.ArgumentNullException">The argument action must not be null.</exception>
        </member>
        <member name="M:System.Waf.Foundation.ThrottledAction.#ctor(System.Action,System.Waf.Foundation.ThrottledActionMode,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Foundation.ThrottledAction"/> class.
            </summary>
            <param name="action">The action that should be throttled.</param>
            <param name="mode">Defines the throttling mode.</param>
            <param name="delayTime">The delay time.</param>
            <exception cref="T:System.ArgumentNullException">The argument action must not be null.</exception>
        </member>
        <member name="P:System.Waf.Foundation.ThrottledAction.IsRunning">
            <summary>
            Indicates that an execution of the action delegate is requested.
            </summary>
        </member>
        <member name="M:System.Waf.Foundation.ThrottledAction.InvokeAccumulated">
            <summary>
            Requests the execution of the action delegate.
            </summary>
        </member>
        <member name="M:System.Waf.Foundation.ThrottledAction.Cancel">
            <summary>
            Cancel the execution of the action delegate that was requested.
            </summary>
        </member>
        <member name="T:System.Waf.Foundation.ValidatableModel">
            <summary>
            Defines a base class for a model that supports validation.
            </summary>
        </member>
        <member name="M:System.Waf.Foundation.ValidatableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Waf.Foundation.ValidatableModel"/> class.
            </summary>
        </member>
        <member name="P:System.Waf.Foundation.ValidatableModel.HasErrors">
            <summary>
            Gets a value that indicates whether the entity has validation errors.
            </summary>
        </member>
        <member name="E:System.Waf.Foundation.ValidatableModel.ErrorsChanged">
            <summary>
            Occurs when the validation errors have changed for a property or for the entire entity.
            </summary>
        </member>
        <member name="M:System.Waf.Foundation.ValidatableModel.GetErrors">
            <summary>
            Gets the validation errors for the entire entity.
            </summary>
            <returns>The validation errors for the entity.</returns>
        </member>
        <member name="M:System.Waf.Foundation.ValidatableModel.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire entity.
            </summary>
            <param name="propertyName">The name of the property to retrieve validation errors for; 
            or null or String.Empty, to retrieve entity-level errors.</param>
            <returns>The validation errors for the property or entity.</returns>
        </member>
        <member name="M:System.Waf.Foundation.ValidatableModel.Validate">
            <summary>
            Validates the object and all its properties. The validation results are stored and can be retrieved by the 
            GetErrors method. If the validation results are changing then the ErrorsChanged event will be raised.
            </summary>
            <returns>True if the object is valid, otherwise false.</returns>
        </member>
        <member name="M:System.Waf.Foundation.ValidatableModel.SetPropertyAndValidate``1(``0@,``0,System.String)">
            <summary>
            Set the property with the specified value and validate the property. If the value is not equal with the field then the field is
            set, a PropertyChanged event is raised, the property is validated and it returns true.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="field">Reference to the backing field of the property.</param>
            <param name="value">The new value for the property.</param>
            <param name="propertyName">The property name. This optional parameter can be skipped
            because the compiler is able to create it automatically.</param>
            <returns>True if the value has changed, false if the old and new value were equal.</returns>
            <exception cref="T:System.ArgumentException">The argument propertyName must not be null or empty.</exception>
        </member>
        <member name="M:System.Waf.Foundation.ValidatableModel.OnErrorsChanged(System.ComponentModel.DataErrorsChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ErrorsChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs"/> instance containing the event data.</param>
        </member>
    </members>
</doc>
